#+title: File

* Installation
** Interacting with the docker container

#+begin_src bash
docker compose exec -it app /bin/sh
# Or
docker compose exec -it app /bin/fish
docker compose exec -it app /usr/sbin/nu
#+end_src
** Initial Installation
#+begin_src bash
docker compose exec -it app /bin/fish
cd /root/draftsmith_rs/draftsmith_rs_api
diesel migration run --migration-dir migrations --database-url $DATABASE_URL
cargo build --release
cargo install --path serve & disown
# Kill this later with
# sudo fuser 37240/tcp -k
~/.cargo/bin/cli client notes flat list | jq
#+end_src
*** Docker
Not
**** Notes
If the entrypoint is updated, rebuild the image:

#+begin_src bash
docker compose build --no-cache
#+end_src
*** Manual
These steps are all handled by docker through =scripts/init-db.sh= and =scripts/entrypoint.sh= (which uses a marker =./data/.initialized=).

This approach can be good for development.

**** Installation
Users will need a postgres database accessible (A =docker-compose.yml= is included in this repo), the port and host can be set as arguments to the cli.

#+begin_src bash
# Create a Database
PGPASSWORD=postgres createdb --host=postgres-db --port=5432 --username=postgres draftsmith2 || true

# Clone the repositories (This is handled in Dockerfile)
git clone --recurse-submodules https://github.com/RyanGreenup/draftsmith_rs $HOME/draftsmith_rs

# Run Diesel migrations
cd $HOME/draftsmith_rs/draftsmith_rs_api
diesel migration run --migration-dir migrations --database-url "$DATABASE_URL"
# There is a =.env= in draftsmith_rs_api with the correct details

# Build the project (The binary is is $HOME/draftsmith_rs/target/cli)
cargo build --release
# Install the project
cargo install --path .
#+end_src

#+begin_src bash
# Spin up the db
docker compose up postgres-db -d
# Build the container
docker compose up app
# From now on the following will work
docker compose up -d
#+end_src
**** Serve API
#+begin_src bash
# Rename binary for local installations
mv ~/.cargo/bin/cli ~/.cargo/bin/draftsmith
# Serve
draftsmith -a '0.0.0.0:37240'
#+end_src
**** Test the API
#+begin_src bash
# Curl
curl http://localhost:37240/notes/flat | jq

# Rust Client / CLI
draftsmith client notes flat list | jq
#+end_src
**** Web App
#+begin_src bash
git clone
poetry install deps
poetry run gunicorn -w 4 -b 0.0.0.0:5000 server:app
#+end_src
